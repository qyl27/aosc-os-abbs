abinfo "About to build glibc for HWCAP sub-targets on amd64 ..."
# Remove micro-arch. specific flags first
# '-march=x86-64' '-mtune=sandybridge' '-msse2'
CFLAGS_AMD64_BASE="$CFLAGS"
CFLAGS_AMD64_BASE="${CFLAGS_AMD64_BASE/-march=x86-64/}"
CFLAGS_AMD64_BASE="${CFLAGS_AMD64_BASE/-mtune=sandybridge/}"
CFLAGS_AMD64_BASE="${CFLAGS_AMD64_BASE/-msse2/}"
CFLAGS_AMD64_v2="$CFLAGS_AMD64_BASE -march=x86-64-v2 -mtune=sandybridge -msse2 -msse4.2"
CFLAGS_AMD64_v3="$CFLAGS_AMD64_BASE -march=x86-64-v3 -mtune=haswell -msse2 -msse4.2 -mavx2"
# TBD: Which -mtune to be chosen for x86_64 v4?
CFLAGS_AMD64_v4="$CFLAGS_AMD64_BASE -march=x86-64-v4 -mtune=generic -msse2 -msse4.2 -mavx2 -mavx512f -mavx512bw -mavx512cd -mavx512dq -mavx512vl"

# Those microarch adjustments must present in CPPFLAGS, since glibc uses
# preprocessing for their hand written assemblies. The assemblies use macros
# and headers to determine which optimized version of one function to be used.
# If removed. you will encounter a bunch of undefined references when multi
# arch is disabled, since non of the optimized code is selected.
CPPFLAGS_AMD64_v2="$CPPFLAGS -march=x86-64-v2 -mtune=sandybridge -msse2 -msse4.2"
CPPFLAGS_AMD64_v3="$CPPFLAGS -march=x86-64-v3 -mtune=haswell -msse2 -msse4.2 -mavx2"
CPPFLAGS_AMD64_v4="$CPPFLAGS -march=x86-64-v4 -mtune=generic -msse2 -msse4.2 -mavx2 -mavx512f -mavx512bw -mavx512cd -mavx512dq -mavx512vl"

for level in v2 v3 v4 ; do
	abinfo "Preparing to build glibc for x86_64-$level ..."
	mkdir -pv "$SRCDIR"/build-"$level"
	pushd "$SRCDIR"/build-"$level"
	unset CFLAGS
	cflags_val="CFLAGS_AMD64_$level"
	export CFLAGS="${!cflags_val}"
	cppflags_val="CPPFLAGS_AMD64_$level"
	export CPPFLAGS="${!cppflags_val}"
	abdbg "CFLAGS is set to:"
	abdbg "\"${CFLAGS[@]}\""
	abdbg "CPPFLAGS is set to:"
	abdbg "\"${CPPFLAGS[@]}\""
	abinfo "(x86_64-$level) Configuring build ..."
	echo "slibdir=/usr/lib" >> configparms
	echo "rtlddir=/usr/lib" >> configparms
	echo "sbindir=/usr/bin" >> configparms
	echo "rootsbindir=/usr/bin" >> configparms
	# We do not need extra programs.
	echo "build-programs=no" >> configparms
	"$SRCDIR"/configure \
		${AUTOTOOLS_DEF[@]} \
		${AUTOTOOLS_AFTER[@]}
	abinfo "(x86_64-$level) Building ..."
	make
	abinfo "(x86_64-$level) Installing into a temporary path ..."
	make install DESTDIR="$SRCDIR"/build-"$level"/dist
	abinfo "(x86_64-$level) Harvesting optimized libraries ..."
	for lib in \
		ld-linux-x86-64.so.2 \
		libanl.so.1 \
		libc.so.6 \
		libc_malloc_debug.so.0 \
		libdl.so.2 \
		libm.so.6 \
		libmvec.so.1 \
		libnsl.so.1 \
		libnss_compat.so.2 \
		libnss_db.so.2 \
		libnss_dns.so.2 \
		libnss_files.so.2 \
		libnss_hesiod.so.2 \
		libpthread.so.0 \
		libresolv.so.2 \
		librt.so.1 \
		libthread_db.so.1 \
		libutil.so.1 ; do
		install -Dvm755 "$SRCDIR"/build-"$level"/dist/usr/lib/$lib \
			"$PKGDIR"/usr/lib/glibc-hwcaps/x86-64-$level/$lib
	done
	abinfo "(x86_64-$level) Done harvesting optimized libraries."
	popd
done
